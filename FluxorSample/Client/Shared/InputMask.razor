@inject IJSRuntime JSRuntime
@inherits InputBase<string>

@if (validateOnKeyPress)
{
    <input id="@id" @attributes="AdditionalAttributes" class="@CssClass" value="@CurrentValue" @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => CurrentValueAsString = __value, CurrentValueAsString)" />
}
else
{
    <input id="@id" @attributes="AdditionalAttributes" class="@CssClass" @bind="CurrentValueAsString" />
}

@code {
    [Parameter]
    public string id { get; set; }
    [Parameter]
    public string returnValue { get; set; }
    [Parameter]
    public bool validateOnKeyPress { get; set; } = true;
    [Parameter]
    public bool returnRawValue { get; set; } = true;
    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(id))
            id = Guid.NewGuid().ToString();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var pattern = AdditionalAttributes["data-mask"].ToString();
            var isRegEx = pattern.StartsWith("/") && pattern.EndsWith("/");
            if (isRegEx)
                pattern = pattern.TrimStart('/').TrimEnd('/');
            await JSRuntime.InvokeVoidAsync("mask", id, pattern, isRegEx, returnRawValue, DotNetObjectReference.Create(this));
        }
    }
    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    [JSInvokable]
    public void returnCurrentValue(string value)
    {
        returnValue = value;
    }
}






