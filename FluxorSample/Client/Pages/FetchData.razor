@page "/fetchdata"
@using FluxorSample.Shared
@using Fluxor
@using FluxorSample.Client.Features.WeatherForecast
@using FluxorSample.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (State.Value.Data is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Summary</th>
                <th>City</th>
                <th>Country</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in State.Value.Data)
            {
                <tr>
                    <td>@forecast.Id</td>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.Summary</td>
                    <td>@forecast.City</td>
                    <td>@forecast.Country</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<LocationEditModel> EditModel = new List<LocationEditModel>();

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    [Inject]
    public IState<WeatherForecastState> State { get; set; }

    protected override void OnInitialized()
    {
        SubscribeToAction<WeatherForecastSetAction>(action =>
        {
            EditModel = State.Value.Data.Select(f => new LocationEditModel()
            {
                Id = f.Id,
                City = f.City,
                Country = f.Country
            })
            .ToList();
        });
        Dispatcher.Dispatch(new WeatherForecastInitializeAction());
    }
}
